import Head from "next/head";
import { GlobalStyles } from "tss-react";
import { makeStyles, useStyles } from "../shared/makeStyles";
import { muiCache } from "../shared/muiCache";
import { CacheProvider } from "@emotion/react";
import { styled } from "@material-ui/core";
import Button from "@material-ui/core/Button"
import { ThemeProvider as MuiThemeProvider } from "@material-ui/core/styles";
import { createTheme } from "@material-ui/core/styles";
import CssBaseline from "@material-ui/core/CssBaseline";
import Breadcrumbs from "@material-ui/core/Breadcrumbs";

const theme = createTheme({
    "palette": {
        "primary": {
            "main": "#32CD32" //Limegreen
        }
    }
});

export default function Home() {
    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <CacheProvider value={muiCache}>
                <MuiThemeProvider theme={theme}>
                    <CssBaseline />
                    <Root />
                </MuiThemeProvider>
            </CacheProvider>
        </>
    );
}

function Root() {

    const { css } = useStyles();

    return (
        <App
            className={css({ "boxShadow": "10px 5px 5px teal" })}
        />
    );

}

const { App } = (() => {


    const useStyles = makeStyles()((theme, _params, css) => {

        const child = {
            "background": "blue",
            "border": "1px solid black"
        };

        const breadcrumbs2_separator = {
            "color": "red"
        };

        return {
            "root": {
                "& > h1:nth-child(2)": {
                    "color": theme.palette.primary.main,
                },
            },
            "ovStyled": {
                "color": "darkred"
            },
            "ovInternal": {
                "backgroundColor": "darkblue"
            },
            "parent": {
                "border": "1px solid black",
                "padding": 30,
                [`&:hover .${css(child)}`]: {
                    "background": "red",
                }
            },
            child,
            "breadcrumbs_className": {
                "backgroundColor": "lightblue",
                "& .MuiBreadcrumbs-separator": {
                    "color": "red"
                },
                "&:hover .MuiBreadcrumbs-separator": {
                    "color": "blue"
                }
            },

            "breadcrumbs2_root": {
                "backgroundColor": "lightblue",
                [`&:hover .${css(breadcrumbs2_separator)}`]: {
                    "color": "blue"
                }
            },
            breadcrumbs2_separator,

            "button2_className": {
                "backgroundColor": "red"
            },

            "button2_root": {
                "backgroundColor": "red"
            },
            "testCx_bgYellow": {
                "backgroundColor": "yellow"
            },
            "testCx_bgCyan": {
                "backgroundColor": "cyan"
            }

        };
    });


    const H1 = styled('h1')({
        "color": "yellow"
    });

    function App(props: { className?: string; }) {
        const { className } = props;
        const { classes, css, cx } = useStyles();

        return (
            <>
                <GlobalStyles
                    styles={{
                        "body": {
                            "backgroundColor": "pink"
                        },
                        ".foo": {
                            "color": "cyan"
                        }
                    }}
                />
                <div className={classes.root}>
                    <h1>Black</h1>
                    <h1>Should be lime green</h1>
                    <h1
                        className={cx(
                            css({ "border": "1px solid black" }),
                            className
                        )}
                    >
                        Black, should have border and shadow
                    </h1>
                    <h1 className="foo">Should be cyan</h1>
                    <H1>Should be yellow</H1>
                    <H1 className={classes.ovStyled}>Should be dark red</H1>
                    <Button variant="contained" color="primary"> Background should be lime green </Button>
                    <Button
                        variant="contained"
                        color="primary"
                        className={classes.ovInternal}
                    >
                        Background should be dark blue
                    </Button>
                    <div className={classes.parent}>
                        <div className={classes.child}>
                            Background should turn red when mouse is hover the parent.
                        </div>
                    </div>

                    <Breadcrumbs
                        className={classes.breadcrumbs_className}
                        color="primary"
                    >
                        <span>background should be lightblue</span>
                        <span>and the separator (/) should be red except when hover, then it is blue</span>
                    </Breadcrumbs>
                    <div style={{ "height": 10 }} />
                    <Breadcrumbs
                        classes={{
                            "root": classes.breadcrumbs2_root,
                            "separator": classes.breadcrumbs2_separator
                        }}
                        color="primary"
                    >
                        <span>background should be lightblue</span>
                        <span>and the separator (/) should be red except when hover, then it is blue</span>
                    </Breadcrumbs>


                    <Button
                        variant="contained"
                        color="primary"
                        className={classes.button2_className}
                    >
                        <span>The background should be red</span>
                    </Button>

                    <Button
                        variant="contained"
                        color="primary"
                        classes={{ "root": classes.button2_root, }}
                    >
                        <span>The background should be red</span>
                    </Button>
                    <div className={cx(classes.testCx_bgYellow, classes.testCx_bgCyan)}>
                        Background should be cyan
                    </div>
                    <div className={cx(classes.testCx_bgCyan, classes.testCx_bgYellow)}>
                        Background should be yellow
                    </div>
                </div>
            </>
        );
    }

    return { App };

})();

